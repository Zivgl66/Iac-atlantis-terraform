 * למה השתמשתי בhashicorp vault ולא בgoogle secrets manager?
 - תמיכה גם בON PREMISES ולא רק בענן. -שליטה יותר רחבה על מחזור החיים של הסודות עם leases and renewal. -פ'יצרים מתקדמים יותר. -התממשקות עם terraform. -לוגים מפורטים על גישה. -משתלב עם CI\CD.
 
* מה זה terraform workspaces?
- סביבות עבודה של טרפורם זה סביבת העובדה שבה פועלות הפקודות של טרפורם (DEFAULT). ניתן ליצור סביבות נוספות ולכל אחת קובץ STATE משלה וככה לנהל מספר סביבות ומופעים שונים.

* מה זה VPC PEERING?
- חיבור בין שני VPCS כך שיוכלו לנתב תעבורה ביניהם באמצעות PRIAVTE IP, כאילו הם באותה הרשת. עידכון של ROUTING TABLE.עידכון של firewall rule.

* למה K8S לא עובדים עם DOCKER יותר?
- הציגו את הCONTAINER RUNTIME INTERFACE STANDARD כי לתקן את האינטרקציה בין הKUBELET לCONTAINER RUNTIMES. דוקר לא עומד בתקן ומצריך עוד שכבה, DOCKERSHIM, שתשמש כגשר בין דוקר לCRI.
- התחזוקה הוסיפה מורכבות,עומס והורדה בביצועים.עמידה בתקן CRI מבטיחה ביצועים ואבטחה טובים יותר.
- דוקר עצמה משתמשת בCONTAINERD כליבה של הCONTAINER RUNTIME שלה. ולכן K8S יכולה להשתמש בזה ישירות ולבטל את הצורך בעוד שכבה.

* איך הSCHEDULER עושה SCORING?
- קודם כל FILTERING - מסנן NODES שלא עומדים בדרישות בסיסיות להפעלת הPOD כמו TAINTS AND TOLERATIONS, NODE AFFINITY\ANTI AFFINITY , משאבים ועוד. 
- לאחר מכן, בין הNODES הנותרים הוא מחליט מי המתאים ביותר, הוא מקצה ציון לכל אחד והNODE עם הציון הגבוה ביותר נבחר. יש מספר פונקציות של SCORING של אחת מחזירה סכום שמחושב יחדיו לSCORE הסופי של כל NODE.
- פונקציות לדוגמא: NODE RESOURCES - מעדיף כמה שפחות משאבים שהוקצו (ציון גבוה יותר). חוקי AFFINITY AND ANTI AFFINITY. TAINT TOLERATIONS. מגבלות פיזור טופולוגי של PODS - למשל על פי ZONES, HOST, REGIONS והNODES שעוזרים להשיג התפלגות מאוזנת מקבלים ציון גבוה יותר. IMAGE LOCALITY- מעדיף NODES שכבר יש להם את הCONTAINER IMAGE שצריך לPODS. 
- ניתן להגדיר פונקציות ניקוד מותאמות אישית.
- כל פונקציה מחזירה ציון בדרכ בין 0 -100, הציונים משוקללים יחדיו. לכל פונקציה יכול להיות משקל שונה. (ניתן לשנות בSCHEDULER POLICY את המשקל של כל פונקציה). לPOD TOPOLOGY CONSTRAINTS יש משקל של 2, כל השאר 1.

* איך לפזר PODS באופן שווה או להחליט איפה הם יהיו?
- שימוש בPOD TOPOLOGY SPREAD CONSTRAINTS בSPECS של הPOD. יש לזה כמה מאפיינים:
maxSkew: ההבדל המרבי המותר במספר התרמילים התואמים בין שתי טופולוגיות כלשהן.
topologyKey: המפתח של תווית הצומת להפצה. kubernetes.io/hostname משמש להתפשטות על פני צמתים.
whenUnsatisfiable: קובע מה לעשות כאשר לא ניתן למלא את האילוץ. DoNotSchedule פירושו שהפוד לא יתוזמן אם הוא לא יכול לעמוד באילוץ.
labelSelector: בוחר את התרמילים לפיזור הטופולוגיה.


*  מה זה GITOPS?
- מסגרת תפעולית מודרנית שממנפת את GIT כמקור אמת יחיד לניהול של פריסות תשתית ואפליקציות. משלב עקרונות IAC וCI\CD ומאפשר לבצע אוטומציה וייעול של ניהול.
- עקרונות עקריים: - תצורה DECLARATIVE קוד המתאר את המצב הרצוי. VCS לאפשור של בקרת גרסאות, שיתוף פעולה וביקורת. זרימות עבודה אוטומטיות, שינויים בREPO מפעילים זרימות עבודה אוטומטיות להחלת שינויים על תשתית או יישומים בדרכ עם צינורות CI\CD. ניטור תמידי של הSTATE של המערכת, כל סחיפה מהמצב הרצוי מתוקנת אוטומטית. 

* מה זה ATLANTIS?
- כלי OPEN SOURCE שמאפשר זרימות עבודה GITOPS עבור TERRAFORM. עושה אוטומציה לפעולות של TERRAFORM על ידי שילוב עם מערכת VCS. מאזין לבקשות משיכה או MERGE ומפעיל אוטומטית פקודות TERRAFORM.
-זה מקל על ניהול תשתית, מאפשר פריסה אוטומטית ושיתוף פעולה יעיל יותר. משתלב עם CI\CD, מבטיח שינויים ופריסה באופן עקבי. 

* רעיונות לשיפור הפרויקט:

- סריקה של קבצי הTERRAFORM בשימוש של CHECKOV - לסרוק את הקוד סטטית כדי למצוא פגיעויות וקונפיגורציות שגויות. 

- שימוש בGITLAB CI עבור אסטרטגיה שונה לכל BRANCH.

- עבודה בסביבות שונות. הקמת סביבה לSUPPLY CHAIN שמה ישב הGITLAB וATLANTIS יחד עם שרת של VAULT והם יוגדרו בTERRAFORM עם TERRAFORM WORKSPACE. ככה שיווצר בידול בין הסביבות ויהיה ניתן להשתמש בשימוש חוזר במודולים של TERRAFORM עבור סביבות שונות.

- שימוש בGOOGLE ARTIFACTS לשמירה של הIMAGE של הWEATHER APP, משיכה משם והרצה על הVM באופן אוטומטי עם PIPELINE 

- שימוש בK8S כדי לפרוס דינמית על הNODES שמוקמים בתשתית את הPODS ואת האפליקציה להגדלת הזמינות, היעילות והSCALABILITY של כל התשתית.

- שימוש בALERTS בהתבסס על המטריקות שיצרנו והLOGS, התראות על סמך שימוש יתר במשאבים בשביל להיות יכולים לעשות AUTO SCALING לעוד משאבים NODES.
